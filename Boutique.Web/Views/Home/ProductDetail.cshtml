@using Boutique.Web.ViewModel
@using Newtonsoft.Json
@model ProductHomeViewModel

@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	var productVariantsJson = JsonConvert.SerializeObject(Model.ProductDetail.ProductVariants);
	var uniqueSizes = Model.ProductDetail.ProductVariants
							.Select(v => v.SizeName)
							.Distinct()
							.ToList();
}

<div class="container mt-5 mb-5">
	<div class="card">	
		<div class="row g-0">	
			<div class="col-md-6 border-end">	
				<div class="d-flex flex-column justify-content-center">
					<div class="main_image">	
						<img src="@Url.Content(Model.ProductDetail.Product.Images.FirstOrDefault()?.ImagePath)" id="main_product_image" width="350">
						</div>	
						<div class="thumbnail_images">	
							<ul id="thumbnail">
							@foreach (var image in Model.ProductDetail.Product.Images)
							{
								<li><img onclick="changeImage(this)" src="@Url.Content(image.ImagePath)" width="70"></li>								
							}	
							</ul>	
						</div>	
				</div>	
			</div>	
			<div class="col-md-6">	
				<div class="p-3 right-side">	
					<div class="d-flex justify-content-between align-items-center">	
						<h3>@Model.ProductDetail.Product.Name</h3>
						<span class="heart"><i class='bx bx-heart'></i></span>	
					</div>	
					<div class="mt-2 pr-3 content">
						<p>@Model.ProductDetail.Product.Description</p>
					</div>	
					<h3>@string.Format("{0:N0}đ",@Model.ProductDetail.Product.Price)</h3>
					<div class="ratings d-flex flex-row align-items-center">	
						<div class="d-flex flex-row">	
							<i class='bx bxs-star'></i>	
							<i class='bx bxs-star'></i>	
							<i class='bx bxs-star'></i>
							<i class='bx bxs-star'></i>
							<i class='bx bx-star'></i>	
						</div>	
						<span>441 reviews</span>	
					</div>	
					<div class="mt-3">
						<span class="fw-bold">Quantity</span>
						<div class="quantity-selector d-flex align-items-center">
							<button class="btn btn-outline-dark btn-sm" onclick="decreaseQuantity()">-</button>
							<input type="number" id="quantityInput" class="form-control mx-2 text-center" style="width: 60px;" value="1" min="1">
							<button class="btn btn-outline-dark btn-sm" onclick="increaseQuantity()">+</button>
						</div>
					</div>

					<div class="mt-3">
						<span class="fw-bold">Size</span>
						<div class="sizes">
							<ul id="size-options">
								@foreach (var size in uniqueSizes)
								{									
									<li onclick="selectSize(this)" 
										class="size-option"
										data-size-name="@size">
										@size
									</li>
								}
							</ul>
						</div>
					</div>

					<div class="mt-5">	
						<span class="fw-bold">Color</span>	
						<div class="colors">	
							<ul id="marker">	
								@foreach (var variant in Model.ProductDetail.ProductVariants)
								{
									<li style="background-color: @(string.IsNullOrEmpty(variant.Hex) ? "transparent" : variant.Hex);"
										class="color-option"
										data-color-name="@variant.ColorName"
										onclick="selectColor(this)">
									</li>

								}
							</ul>	
						</div>	
					</div>	
					<div class="buttons d-flex flex-row mt-5 gap-3">	
						<button class="btn btn-outline-dark">Buy Now</button>	
						<button class="btn btn-dark" onclick="addToCart()">Add to Cart</button>
					</div>	
					<div class="search-option">	
						<i class='bx bx-search-alt-2 first-search'></i>
						<div class="inputs">	
							<input type="text" name="">	
						</div>	
						<i class='bx bx-share-alt share'></i>	
					</div>	
				</div>	
			</div>
		</div>	
	</div> 
</div>
<style>
	body {
		background-color: #ecedee
	}

	.card {
		border: none;
		overflow: hidden
	}

	.thumbnail_images ul {
		list-style: none;
		justify-content: center;
		display: flex;
		align-items: center;
		margin-top: 10px
	}

		.thumbnail_images ul li {
			margin: 5px;
			padding: 10px;
			border: 2px solid #eee;
			cursor: pointer;
			transition: all 0.5s
		}

			.thumbnail_images ul li:hover {
				border: 2px solid #000
			}

	.main_image {
		display: flex;
		justify-content: center;
		align-items: center;
		border-bottom: 1px solid #eee;
		height: 400px;
		width: 100%;
		overflow: hidden
	}

	.heart {
		height: 29px;
		width: 29px;
		background-color: #eaeaea;
		border-radius: 50%;
		display: flex;
		justify-content: center;
		align-items: center
	}

	.content p {
		font-size: 12px
	}

	.ratings span {
		font-size: 14px;
		margin-left: 12px
	}

	.quantity-selector {
		display: flex;
		align-items: center;
	}

		.quantity-selector button {
			width: 30px;
			height: 30px;
		}


	.colors {
		margin-top: 5px
	}

		.colors ul {
			list-style: none;
			display: flex;
			padding-left: 0px
		}

			.colors ul li {
				height: 20px;
				width: 20px;
				display: flex;
				border-radius: 50%;
				margin-right: 10px;
				cursor: pointer;
				transition: all 0.3s ease;
				border: 2px solid transparent;
			}

				.colors ul li:hover,
				.colors ul li.selected {
					border-color: #000;
					box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
				}

				.colors ul li.selected {
					background-color: #05BCFF;
					border-color: #05BCFF;
				}

				.colors ul li:nth-child(1) {
					background-color: #6c704d
				}

				.colors ul li:nth-child(2) {
					background-color: #96918b
				}

				.colors ul li:nth-child(3) {
					background-color: #68778e
				}

				.colors ul li:nth-child(4) {
					background-color: #263f55
				}

				.colors ul li:nth-child(5) {
					background-color: black
				}

	.right-side {
		position: relative
	}

	.search-option {
		position: absolute;
		background-color: #000;
		overflow: hidden;
		align-items: center;
		color: #fff;
		width: 200px;
		height: 200px;
		border-radius: 49% 51% 50% 50% / 68% 69% 31% 32%;
		left: 30%;
		bottom: -250px;
		transition: all 0.5s;
		cursor: pointer
	}

		.search-option .first-search {
			position: absolute;
			top: 20px;
			left: 90px;
			font-size: 20px;
			opacity: 1000
		}

		.search-option .inputs {
			opacity: 0;
			transition: all 0.5s ease;
			transition-delay: 0.5s;
			position: relative
		}

			.search-option .inputs input {
				position: absolute;
				top: 200px;
				left: 30px;
				padding-left: 20px;
				background-color: transparent;
				width: 300px;
				border: none;
				color: #fff;
				border-bottom: 1px solid #eee;
				transition: all 0.5s;
				z-index: 10
			}

				.search-option .inputs input:focus {
					box-shadow: none;
					outline: none;
					z-index: 10
				}

		.search-option:hover {
			border-radius: 0px;
			width: 100%;
			left: 0px
		}

			.search-option:hover .inputs {
				opacity: 1
			}

			.search-option:hover .first-search {
				left: 27px;
				top: 25px;
				font-size: 15px
			}

			.search-option:hover .inputs input {
				top: 20px
			}

		.search-option .share {
			position: absolute;
			right: 20px;
			top: 22px
		}

	.buttons .btn {
		height: 50px;
		width: 150px;
		border-radius: 0px !important
	}

	.sizes {
		margin-top: 5px;
	}

		.sizes ul {
			list-style: none;
			display: flex;
			padding-left: 0px;
			gap: 10px;
		}

			.sizes ul li {
				display: flex;
				justify-content: center;
				align-items: center;
				height: 40px;
				width: 40px;
				border: 1px solid #ccc;
				border-radius: 5px;
				cursor: pointer;
				font-size: 14px;
				font-weight: bold;
				transition: all 0.3s ease;
			}

				.sizes ul li:hover,
				.sizes ul li.selected {
					background-color: #000;
					color: #fff;
					border-color: #000;
				}

	.disabled {
		pointer-events: none;
		opacity: 0.5;
	}

</style>
<script>
	function changeImage(element) {

		var main_prodcut_image = document.getElementById('main_product_image');
		main_prodcut_image.src = element.src;


	}

	const currentUserId = '@User.FindFirst("sub")?.Value';

	const productVariants = @Html.Raw(productVariantsJson);

	let selectedSize = null;
	let selectedColor = null;

	function filterOptions() {
		const sizeOptions = document.querySelectorAll('.size-option');
		const colorOptions = document.querySelectorAll('.color-option');

		colorOptions.forEach(option => option.classList.remove('disabled'));

		if (selectedSize) {

			const validColors = productVariants
				.filter(variant => variant.SizeName === selectedSize)
				.map(variant => variant.ColorName);

			colorOptions.forEach(option => {
				if (!validColors.includes(option.dataset.colorName)) {
					option.classList.add('disabled');
				}
			});
		}
	}

	function selectSize(element) {
		selectedSize = element.dataset.sizeName;

		document.querySelectorAll('.size-option').forEach(option => {
			option.classList.remove('selected');
		});
		element.classList.add('selected');

		filterOptions();
	}

	function selectColor(element) {
		if (element.classList.contains('disabled')) {
			return;
		}

		selectedColor = element.dataset.colorName;

		document.querySelectorAll('.color-option').forEach(option => {
			option.classList.remove('selected');
		});
		element.classList.add('selected');
	}

	function getCookie(name) {
		const value = `; ${document.cookie}`;
		const parts = value.split(`; ${name}=`);
		if (parts.length === 2) return parts.pop().split(';').shift();
		return null;
	}

	function decreaseQuantity() {
		const quantityInput = document.getElementById('quantityInput');
		let currentQuantity = parseInt(quantityInput.value, 10);

		if (currentQuantity > 1) {
			quantityInput.value = currentQuantity - 1;
		}
	}

	function increaseQuantity() {
		const quantityInput = document.getElementById('quantityInput');
		let currentQuantity = parseInt(quantityInput.value, 10);

		quantityInput.value = currentQuantity + 1;
	}


	async function addToCart() {
		if (!selectedSize || !selectedColor) {
			alert('Please select both size and color.');
			return;
		}

		const accessToken = getCookie('AccessToken');

		if (!accessToken) {
			alert('You must login in order to add product to cart.');
			return;
		}

		const selectedVariant = productVariants.find(variant =>
			variant.SizeName === selectedSize && variant.ColorName === selectedColor
		);

		if (!selectedVariant) {
			alert('Product variant not found.');
			return;
		}

		const quantity = document.getElementById('quantityInput').value;

		const data = {
			UserId: currentUserId,
			Quantity: parseInt(quantity, 10),
			ProductVariantId: selectedVariant.ProductVariantId,
		};

		fetch('/api/cart/Add-To-Cart', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': `Bearer ${accessToken}`,
			},
			body: JSON.stringify(data),
		})
			.then(response => response.json())
			.then(data => {
				if (data.success) {
					alert('Item added to cart!');
				} else {
					alert('Failed to add item to cart.');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				alert('An error occurred while adding to the cart.');
			});
	}


</script>
